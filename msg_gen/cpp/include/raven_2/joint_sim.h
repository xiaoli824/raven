/* Auto-generated by genmsg_cpp for file /home/raven/xiao_wksp/raven_2/msg/joint_sim.msg */
#ifndef RAVEN_2_MESSAGE_JOINT_SIM_H
#define RAVEN_2_MESSAGE_JOINT_SIM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace raven_2
{
template <class ContainerAllocator>
struct joint_sim_ {
  typedef joint_sim_<ContainerAllocator> Type;

  joint_sim_()
  : jpos()
  {
    jpos.assign(0.0);
  }

  joint_sim_(const ContainerAllocator& _alloc)
  : jpos()
  {
    jpos.assign(0.0);
  }

  typedef boost::array<float, 16>  _jpos_type;
  boost::array<float, 16>  jpos;


  typedef boost::shared_ptr< ::raven_2::joint_sim_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raven_2::joint_sim_<ContainerAllocator>  const> ConstPtr;
}; // struct joint_sim
typedef  ::raven_2::joint_sim_<std::allocator<void> > joint_sim;

typedef boost::shared_ptr< ::raven_2::joint_sim> joint_simPtr;
typedef boost::shared_ptr< ::raven_2::joint_sim const> joint_simConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::raven_2::joint_sim_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::raven_2::joint_sim_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace raven_2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raven_2::joint_sim_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raven_2::joint_sim_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raven_2::joint_sim_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a74a42144ef69df7d30c6919af885731";
  }

  static const char* value(const  ::raven_2::joint_sim_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa74a42144ef69df7ULL;
  static const uint64_t static_value2 = 0xd30c6919af885731ULL;
};

template<class ContainerAllocator>
struct DataType< ::raven_2::joint_sim_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raven_2/joint_sim";
  }

  static const char* value(const  ::raven_2::joint_sim_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raven_2::joint_sim_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[16] jpos\n\
";
  }

  static const char* value(const  ::raven_2::joint_sim_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raven_2::joint_sim_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raven_2::joint_sim_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.jpos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct joint_sim_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raven_2::joint_sim_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::raven_2::joint_sim_<ContainerAllocator> & v) 
  {
    s << indent << "jpos[]" << std::endl;
    for (size_t i = 0; i < v.jpos.size(); ++i)
    {
      s << indent << "  jpos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jpos[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RAVEN_2_MESSAGE_JOINT_SIM_H

